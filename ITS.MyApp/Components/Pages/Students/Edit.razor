@page "/Students/edit/{id:int}"
@inject StudentService Data
@inject NavigationManager Nav

<h3>Edit student</h3>

<EditForm Model="EditStudent"
          FormName="EditStudent"
          OnSubmit="OnSave">

    <div class="form-group">
        <label for="txtFirstname">Firstname:</label>
        <InputText @bind-Value="EditStudent.Firstname"
                   class="form-control"
                   id="txtFirstname"/>
    </div>

    <div class="form-group">
        <label for="txtLastname">Lastname:</label>
        <InputText @bind-Value="EditStudent.Lastname"
                   class="form-control"
                   id="txtLastname"/>
    </div>

    <div class="form-group">
        <label for="txtBirthPlace">BirthPlace:</label>
        <InputText @bind-Value="EditStudent.BirthPlace"
                   class="form-control"
                   id="txtBirthPlace"/>
    </div>

    <div class="form-group">
        <label for="txtBirthDate">BirthDate:</label>
        <InputDate @bind-Value="EditStudent.BirthDate"
                   class="form-control"
                   id="txtBirthDate"/>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">Update</button>
    <a class="btn btn-secondary" href="/">Cancel</a>
    <hr />
</EditForm>


@code {

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Student EditStudent { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            EditStudent = await Data.GetStudentAsync(Id);
        }
    }

    private async Task OnSave()
    {
        EditStudent.Id = Id;
        await Data.UpdateStudentAsync(EditStudent);
        Nav.NavigateTo("/");
    }

}